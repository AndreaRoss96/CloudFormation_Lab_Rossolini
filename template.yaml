AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Enhanced RESTful API using AWS API Gateway and AWS Lambda.
  Returns client IP address
  Implements best practices for IAM, environment variables, monitoring, and observability.


Parameters:
  S3BucketName:
    Type: String
    Description: S3 bucket containing the Lambda deployment package
  S3Key:
    Type: String
    Description: S3 key (object name) for the Lambda deployment package

Resources:
  # --------------------------------------------------------------------------
  # DynamoDB Table
  # --------------------------------------------------------------------------
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ItemsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  #region API Gateway
  # --------------------------------------------------------------------------
  # API Gateway Resources <--> from Tutorial
  # --------------------------------------------------------------------------
  SimpleRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API that gets users IP
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: whats_my_ip

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SimpleRestAPI.RootResourceId
      PathPart: "ip"
      RestApiId: !Ref SimpleRestAPI

  ApiGatewayMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref SimpleRestAPI
    
  ApiGatewayMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref SimpleRestAPI

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Development stage
      RestApiId: !Ref SimpleRestAPI
      StageName: dev

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodGET
      - ApiGatewayMethodPOST
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref SimpleRestAPI

  # --------------------------------------------------------------------------
  # API Gateway IAM Role
  # --------------------------------------------------------------------------
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:InvokeFunction' # lambda:* -> is over permissible
                Resource: !GetAtt LambdaFunction.Arn
  #endregion

  # --------------------------------------------------------------------------
  # Lambda Function --> improve from tutorial for higher grade (Hopefully)
  # --------------------------------------------------------------------------
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Lambda function that handles GET and POST requests via API Gateway.
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      FunctionName: 'get_ip'
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TABLE_NAME: !Ref ItemsTable

  # --------------------------------------------------------------------------
  # Lambda IamRole -> to improve
  # --------------------------------------------------------------------------
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: get_ip_lambda_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ItemsTable.Arn


  # --------------------------------------------------------------------------
  # Lambda Permission for API Gateway
  # --------------------------------------------------------------------------
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleRestAPI}/*/*

# --------------------------------------------------------------------------
# Outputs
# --------------------------------------------------------------------------
Outputs:
  ApiInvokeURL:
    Description: "Invoke URL for the REST API"
    Value: !Sub "https://${SimpleRestAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/ip"